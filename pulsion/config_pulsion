#!/bin/bash

function command_php_patch_ini {

    function help {

        echo -e "Install nginx."

    }

    function php_patch_ini {

        php_ini_path=`php -i | grep 'Loaded Configuration File' | awk '{print $5}'`

        if [ $php_ini_path = "(none)" ] 
        then
            echo "No php ini loaded, making /etc/php.ini"
            cp /etc/php.ini.default /etc/php.ini
            php_ini_path='/etc/php.ini'
        fi

        php_ini_backup="$php_ini_path.backup"

        cp $php_ini_path $php_ini_backup
        sed 's%;date.timezone =.*%date.timezone = "Europe/Paris"%' $php_ini_backup > $php_ini_path

        php_fpm_path=`php-fpm -i | grep 'fpm.config' | awk '{print $3}'`
        if [ $php_fpm_path = "no" ]
        then
            echo "No php-fpm.conf loaded, making /etc/php-fpm.conf"
            cp /etc/php-fpm.conf.default /etc/php-fpm.conf
            php_fpm_path='/etc/php-fpm.conf'
        fi

        php_fpm_backup="$php_fpm_path.backup"

        cp $php_fpm_path $php_fpm_backup
        sed 's%;error_log.*%error_log = /usr/local/var/log/php-fpm/php-fpm.log%' $php_fpm_backup > $php_fpm_path
    }

    function process {

        exesudo php_patch_ini
    }

}
function command_install {

    function help {

        echo -e "Install nginx bibi!"

    }

    function php_patch_ini {

        php_ini_path=`php -i | grep 'Loaded Configuration File' | awk '{print $5}'`

        if [ $php_ini_path = "(none)" ] 
        then
            echo "No php ini loaded, making /etc/php.ini"
            cp /etc/php.ini.default /etc/php.ini
            php_ini_path='/etc/php.ini'
        fi

        php_ini_backup="$php_ini_path.backup"

        cp $php_ini_path $php_ini_backup
        sed 's%;date.timezone =.*%date.timezone = "Europe/Paris"%' $php_ini_backup > $php_ini_path

        php_fpm_path=`php-fpm -i | grep 'fpm.config' | awk '{print $3}'`
        if [ $php_fpm_path = "no" ]
        then
            echo "No php-fpm.conf loaded, making /etc/php-fpm.conf"
            cp /etc/php-fpm.conf.default /etc/php-fpm.conf
            php_fpm_path='/etc/php-fpm.conf'
        fi

        php_fpm_backup="$php_fpm_path.backup"

        cp $php_fpm_path $php_fpm_backup
        sed 's%;error_log.*%error_log = /usr/local/var/log/php-fpm/php-fpm.log%' $php_fpm_backup > $php_fpm_path
    }

    function get_nginx {

        curl ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz > pcre.tar.gz
        tar -xf pcre.tar.gz
        cd pcre-8.38
        ./configure --prefix=/usr/local
        make
        make install
        cd ..
        rm -r pcre-8.38
        rm pcre.tar.gz

        curl http://nginx.org/download/nginx-1.11.3.tar.gz > nginx.tar.gz
        tar -xf nginx.tar.gz
        cd nginx-1.11.3
        ./configure --prefix=/usr/local/nginx
        make
        make install
        cd ..
        rm -r nginx-1.11.3
        rm nginx.tar.gz
    }

    function process {

        set -e
        
        if is_command_exist php-fpm
        then
            verbose 1 "php-fmp installed"
        else
            verbose 1 "Fatal : php-fpm not installed"
            exit 1
        fi
        
        if is_command_exist /usr/local/nginx/sbin/nginx; then
            verbose 1 "nginx already installed. Skip"
        else
            get_nginx
        fi

        pulsion update_config

        mkdir -p /usr/local/var/log/php-fpm

        verbose 1 "patching php.ini timezone"

        pulsion php_patch_ini
    }
}


function command_update_config {

    function help {

        echo -e "Update nginx"

    }

    function process {

        set -e

        echo "Gettings last nginx config"

        rm /usr/local/nginx/conf/nginx.conf

        mkdir -p /usr/local/nginx/conf/logs
        mkdir -p /usr/local/nginx/conf/sites-available
        mkdir -p /usr/local/nginx/conf/sites-enabled
        mkdir -p /usr/local/nginx/conf/conf.d
        mkdir -p /usr/local/nginx/conf/ssl

        curl -L https://raw.githubusercontent.com/arnaudhe/config/master/nginx/nginx.conf -o /usr/local/nginx/conf/nginx.conf
        curl -L https://raw.githubusercontent.com/arnaudhe/config/master/nginx/conf.d/php-fpm -o /usr/local/nginx/conf/conf.d/php-fpm
        curl -L https://raw.githubusercontent.com/arnaudhe/config/master/nginx/sites-available/default -o /usr/local/nginx/conf/sites-available/default
        curl -L https://raw.githubusercontent.com/arnaudhe/config/master/nginx/sites-available/silex -o /usr/local/nginx/conf/sites-available/silex

        ln -sfv /usr/local/nginx/conf/sites-available/default /usr/local/nginx/conf/sites-enabled/default
        ln -sfv /usr/local/nginx/conf/sites-available/silex /usr/local/nginx/conf/sites-enabled/silex

    }
}

function command_start {

    function help {

        echo -e "Start php-fcm and nginx"

    }

    function process {

        verbose 1 "Starting php-fcm..."
        php-fpm
        verbose 1 "Starting nginx"
        /usr/local/nginx/sbin/nginx
    }
}

function command_stop {

    function help {

        echo -e "Stop php-fcm and nginx"

    }

    function process {
        
        verbose 1 "Stopping php-fcm..."
        for pid in `lsof -Pni4 | grep php-fpm | awk {'print $2'}`
        do 
            kill -9 $pid
        done
        verbose 1 "Stopping nginx"
        /usr/local/nginx/sbin/nginx -s stop

    }
}

function command_restart {

    function help {

        echo -e "Restart PHP-FCM and NGINX"

    }

    function process {

        pulsion stop
        pulsion start

    }
}

function command_doctor {

    function help {

        echo -e "Check install sanity"

    }

    function process {

        set -e   #stop if error

        if is_command_exist /usr/local/nginx/sbin/nginx
        then
            verbose 1 "nginx conf auto-test"
            /usr/local/nginx/sbin/nginx -T > /dev/null
        else
            verbose 1 "nginx not installed"
            exit 1
        fi

        if is_command_exist php-fpm
        then
            verbose 1 "php-fpm conf auto-test"
            php-fpm --test
        else
            verbose 1 "php-fpm not installed"
            exit 1
        fi

        pulsion start

        sleep 2  #let services time to init

        verbose 1 "Test of php-fcm"
        lsof -Pni4 | grep LISTEN | grep php

        verbose 1 "Test of nginx"
        code=`curl -s -o /dev/null -w "%{http_code}" http://localhost:8080`
        if [ $code = "200" ]; then
            verbose 1 "Connection Ok (200)"
            verbose 1 " "
            exit 0
        else
            verbose 1 "Connection error (http $code)"
            exit 1
        fi
    }
}

function command_logs_access {

    function help {

        echo -e "Nginx logs access"
        echo -e "usage: pulsion logs_access [--vhost <hostname>]"

    }

    function process {

        if has_param --vhost "$@"; then
            vhost="$(get_param_value --vhost "$@")"
            tail -250f "/usr/local/nginx/logs/$vhost.access.log"
        else
            tail -250f /usr/local/nginx/logs/access.log
        fi
    }
}

function command_logs_error {

    function help {

        echo -e "Nginx logs errors"

    }

    function process {

        tail -250f /usr/local/nginx/logs/error.log
    }
}

function command_vhosts_list {

    function help {

        echo -e "nginx vhosts listing"

    }

    function process {

        for i in $(ls /usr/local/nginx/conf/sites-available)
        do
            if [ -e "/usr/local/nginx/conf/sites-enabled/$i" ]
            then
                status='(*)'
            else
                status='( )'
            fi
            host=$(cat /usr/local/nginx/conf/sites-available/$i | grep server_name | head -1 | awk {'print $2;'})
            port=$(cat /usr/local/nginx/conf/sites-available/$i | grep listen | head -1 | awk {'print $2;'})
            root=$(cat /usr/local/nginx/conf/sites-available/$i | grep root | head -1 | awk {'print $2;'})
            echo -e "$status $i\t${host//;}:${port//;}\t${root//;}"
        done
    }
}

function command_vhosts_add {

    function help {

        echo -e "nginx vhosts add. contains wizard."

    }

    function add_etc_host {

        last_vhost=$(ls -t /usr/local/nginx/conf/sites-available | head -1)
        host=$(cat /usr/local/nginx/conf/sites-available/$last_vhost | grep server_name | head -1 | awk {'print $2;'})
        echo "127.0.0.1    ${host//;}" >> /etc/hosts

    }

    function process {

        echo -e "Please choose a name"
        read name
        list=$(ls /usr/local/nginx/conf/sites-available)
        echo -e "Please choose a template in $list (might be 'default')"
        read template
        echo -e "Please choose a server hostname (might be 'localhost')"
        read host
        echo -e "Please choose a server port (might be '808x')"
        read port
        echo -e "Please choose a documents root (might be '/Users/Arnaud/Sites')"
        read docroot
        echo -e "Do you want to append server host in /etc/hosts file ? (y/n)"
        read appendhosts

        set -e
        set -o pipefail

        cat "/usr/local/nginx/conf/sites-available/$template" | sed "s%listen.*%listen       $port;%" | sed "s%server_name.*%server_name  $host;%" | sed "s%root     .*%root         $docroot;%" | sed "s%access_log.*%access_log  /usr/local/nginx/logs/$name.access.log  main;%" > "/usr/local/nginx/conf/sites-available/$name"

        ln -sfv "/usr/local/nginx/conf/sites-available/$name" "/usr/local/nginx/conf/sites-enabled/$name"

        if [ $appendhosts = 'y' ]
        then
            exesudo add_etc_host
        fi
    }
}

function command_vhosts_del {

    function help {

        echo -e "pulsion vhosts_del --name <name>"

    }

    function process {

        set -e

        if has_param --name "$@"; then

            vhost="$(get_param_value --name "$@")"

            if [ -e "/usr/local/nginx/conf/sites-available/$vhost" ]
            then
                rm "/usr/local/nginx/conf/sites-available/$vhost"
            fi

            if [ -e "/usr/local/nginx/conf/sites-enabled/$vhost" ]
            then
                rm "/usr/local/nginx/conf/sites-enabled/$vhost"
            fi

            if [ -e "/usr/local/nginx/logs/$vhost.access.log" ]
            then
                rm "/usr/local/nginx/logs/$vhost.access.log"
            fi

        else

            echo -e "Missing param name"
            help
            exit 1

        fi
    }
}

function command_vhosts_enable {

    function help {

        echo -e "pulsion vhosts_enable --name <name>"

    }

    function process {

        set -e

        if has_param --name "$@"; then
            vhost="$(get_param_value --name "$@")"
            if [ -e "/usr/local/nginx/conf/sites-enabled/$vhost" ]
            then
                verbose 1 "Already enabled"
            else
                ln -sfv "/usr/local/nginx/conf/sites-available/$vhost" "/usr/local/nginx/conf/sites-enabled/$vhost"
            fi
        else
            echo -e "Missing param name"
            help
            exit 1
        fi
    }
}

function command_vhosts_disable {

    function help {

        echo -e "pulsion vhosts_disable --name <name>"

    }

    function process {

        set -e

        if has_param --name "$@"; then
            vhost="$(get_param_value --name "$@")"
            if [ -e "/usr/local/nginx/conf/sites-enabled/$vhost" ]
            then
                rm "/usr/local/nginx/conf/sites-enabled/$vhost"
            else
                verbose 1 "Already disabled"
            fi
        else
            echo -e "Missing param name"
            help
            exit 1
        fi
    }
}

function command_php_logs_error {

    function help {

        echo -e "php-fpm logs errors"

    }

    function process {

        tail -250f /usr/local/var/log/php-fpm/php-fpm.log
    }
}
